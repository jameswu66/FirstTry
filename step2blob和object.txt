****************************
blob：查阅资料与学习

.git中
blob，表示文件内容
还有：
Tree 对象：表示目录结构。
Commit 对象：表示一次提交，包括提交的元数据和指向树对象的引用。
Tag 对象：表示标签。
"blob"（Binary Large Object，二进制大对象）是一种数据类型，用于存储大量的二进制数据
例如，在 MySQL 中，有以下几种 blob 类型：

TINYBLOB: 存储非常小的二进制数据，最大长度 255 字节。
BLOB: 存储中等大小的二进制数据，最大长度 65,535 字节（64 KB）。
MEDIUMBLOB: 存储较大的二进制数据，最大长度 16,777,215 字节（16 MB）。
LONGBLOB: 存储非常大的二进制数据，最大长度 4,294,967,295 字节（4 GB）。
它可以存储照片、PDF、Word文档等。

"blob <size>\0"为文件头的格式
****************************


****************************
object的作用和存储格式
每个 Git 对象都存储在 .git/objects 目录下，已经被压缩和存储
对象的文件名是其 SHA-1 哈希值。对象存储在一个两层的目录结构中，其中前两位作为目录名，剩余的 38 位作为文件名。
Git 对象存储在zlib压缩格式中。
对象的内容包括对象类型、对象大小和实际数据。然后这些内容被压缩并存储。

示例：
假设有一个包含 "Hello, Git!" 内容的文件 example.txt，将其添加到 Git 仓库中。
1.计算 SHA-1 哈希
    Git 会根据文件内容计算 SHA-1 哈希值。例如，example.txt 的内容是 Hello, Git!\n，其 SHA-1 哈希值可能是 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
2.生成对象内容
    合并对象类型和长度以及实际内容：blob 14\0Hello, Git!\n
3.压缩对象内容
    使用zlib对文件进行压缩
4.存储对象
    将压缩后的对象内容存储在 .git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391 文件中
    （文件前两位为一级，后多位为文件名）

这些对象是 Git 的基本数据单元，表示文件内容、目录结构、提交和标签等。通过这种方式，Git 能够高效地管理和查询版本控制数据。
***************************